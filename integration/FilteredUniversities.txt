Filtered Universities Integration Plan (Swagger Style)
=====================================================

**Flutter Page:** `lib/screens/FilteredUniversities/FilteredUniversities.dart`

**Base API URL:** `/api/v1/`

---

### 1. Filter Universities
**Endpoint:** `POST /api/v1/universities/universities/filter/`

**Description:**
Returns a filtered list of universities based on ranking, cities, and rating. This data must be used to dynamically populate the university list in the UI (no static values).

**Request Body:**
- `ranking`: List of ranking filters (JSON array)
- `cities`: List of city filters (JSON array)
- `rating`: Rating filter (string or number)

**Response Codes:**
- 200 OK: List of filtered universities
- 400 Bad Request: Invalid input
- 401 Unauthorized: Authentication required
- 500 Internal Server Error: Server error

**Response Example (200):**
```json
[
  {
    "id": 1,
    "name": "Siberian State Medical University",
    "location": "Tomsk",
    "country": "Russia",
    "logo": "https://...",
    "established_year": "1888",
    "bookmark": false,
    "rating": 4.5
  }
]
```

---

### 2. Bookmark University
**Endpoint:** `POST /api/v1/universities/universities/bookmark/`

**Description:**
Bookmark a university by its ID.

**Request Body:**
- `university_id`: ID of the university to bookmark

**Response Codes:**
- 200 OK: University bookmarked
- 404 Not Found: University not found
- 401 Unauthorized: Authentication required
- 500 Internal Server Error: Server error

**Response Example (200):**
```json
{"success": true, "message": "University bookmarked successfully"}
```

---

### State Management
- Use **Riverpod** for all state (loading, data, error)
- Show loading indicators and error messages as needed
- No UI changes, only state/data for UI to consume
- **All university data in the UI must come from the Riverpod provider, not static values**

---

### Error Handling & Try-Catch
- **Wrap every logic block with `try-catch`**
- Log exceptions in debug mode
- Handle `SocketException`, `TimeoutException`, `FormatException`, `HttpException`
- Show user-friendly error messages using SnackBar or AlertDialog
- Handle all HTTP/network errors and show user-friendly messages
- Response codes handled: 200, 400, 401, 404, 500

---

### Null Safety
- Enable strict null safety in `pubspec.yaml`
- Avoid forced unwrapping (`!`)
- Always check for `null` when reading API responses or shared preferences
- Use `??` for fallbacks and `late` carefully

---

### Token Usage
- All endpoints require JWT token in `Authorization: Bearer <token>` header

---

### Testing
- Test all endpoints with Postman and Django backend

---
Refer to integration_guidelines.txt for standards.
ALSO VERY IMPORTANT: MAKE SURE TO REPLACE ALL THE STATIC VALUES WITH VALUES FETCHED FROM THE BACKEND API TO JSON 