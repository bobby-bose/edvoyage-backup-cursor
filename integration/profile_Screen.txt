Profile Screen Integration Plan (Swagger Style)
==============================================

**Flutter Page:** `lib/screens/profile/profile_Screen.dart`

**Base API URL:** `/api/v1/`

---

### 1. Get User Profile
**Endpoint:** `GET /api/v1/users/profile/`

**Description:**
Returns the user's profile information (name, avatar, etc.). This data must be used to dynamically populate the profile screen (no static values).

**Response Codes:**
- 200 OK: User profile object
- 401 Unauthorized: Authentication required
- 500 Internal Server Error: Server error

**Response Example (200):**
```json
{
  "id": 1,
  "name": "John Doe",
  "avatar_url": "https://...",
  ...
}
```

---

### 2. Update User Avatar
**Endpoint:** `POST /api/v1/users/profile/avatar/`

**Description:**
Upload and update the user's avatar image.

**Request Body:**
- `avatar`: Image file (multipart/form-data)

**Response Codes:**
- 200 OK: Avatar updated
- 400 Bad Request: Invalid file
- 401 Unauthorized: Authentication required
- 500 Internal Server Error: Server error

**Response Example (200):**
```json
{"success": true, "avatar_url": "https://..."}
```

---

### State Management
- Use **Riverpod** for all state (loading, data, error)
- Show loading indicators and error messages as needed
- No UI changes, only state/data for UI to consume
- **All profile data in the UI must come from the Riverpod provider, not static values**

---

### Error Handling & Try-Catch
- **Wrap every logic block with `try-catch`**
- Log exceptions in debug mode
- Handle `SocketException`, `TimeoutException`, `FormatException`, `HttpException`
- Show user-friendly error messages using SnackBar or AlertDialog
- Handle all HTTP/network errors and show user-friendly messages
- Response codes handled: 200, 400, 401, 500

---

### Null Safety
- Enable strict null safety in `pubspec.yaml`
- Avoid forced unwrapping (`!`)
- Always check for `null` when reading API responses or shared preferences
- Use `??` for fallbacks and `late` carefully

---

### Token Usage
- All endpoints require JWT token in `Authorization: Bearer <token>` header

---

### Testing
- Test all endpoints with Postman and Django backend

---
Refer to integration_guidelines.txt for standards.
ALSO VERY IMPORTANT: MAKE SURE TO REPLACE ALL THE STATIC VALUES WITH VALUES FETCHED FROM THE BACKEND API TO JSON 