# Generated by Django 5.2.4 on 2025-08-01 17:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='University Name')),
                ('short_name', models.CharField(blank=True, max_length=100, verbose_name='Short Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL Slug')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('mission_statement', models.TextField(blank=True, verbose_name='Mission Statement')),
                ('vision_statement', models.TextField(blank=True, verbose_name='Vision Statement')),
                ('university_type', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('international', 'International'), ('research', 'Research'), ('liberal_arts', 'Liberal Arts'), ('technical', 'Technical'), ('medical', 'Medical'), ('business', 'Business')], max_length=20, verbose_name='University Type')),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Founded Year')),
                ('accreditation', models.TextField(blank=True, verbose_name='Accreditation')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='State/Province')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='universities/logos/', verbose_name='Logo')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='universities/banners/', verbose_name='Banner Image')),
                ('gallery', models.JSONField(blank=True, default=list, verbose_name='Gallery Images')),
                ('total_students', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Students')),
                ('international_students', models.PositiveIntegerField(blank=True, null=True, verbose_name='International Students')),
                ('faculty_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Faculty Count')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'University',
                'verbose_name_plural': 'Universities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Campus Name')),
                ('campus_type', models.CharField(choices=[('main', 'Main Campus'), ('branch', 'Branch Campus'), ('satellite', 'Satellite Campus'), ('online', 'Online Campus'), ('international', 'International Campus')], default='main', max_length=20, verbose_name='Campus Type')),
                ('address', models.TextField(verbose_name='Address')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='State/Province')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('facilities', models.JSONField(blank=True, default=list, verbose_name='Facilities')),
                ('accommodation', models.TextField(blank=True, verbose_name='Accommodation')),
                ('transportation', models.TextField(blank=True, verbose_name='Transportation')),
                ('images', models.JSONField(blank=True, default=list, verbose_name='Campus Images')),
                ('virtual_tour_url', models.URLField(blank=True, verbose_name='Virtual Tour URL')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_main_campus', models.BooleanField(default=False, verbose_name='Main Campus')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campuses', to='universities.university')),
            ],
            options={
                'verbose_name': 'Campus',
                'verbose_name_plural': 'Campuses',
                'ordering': ['university', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UniversityFaculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Faculty Name')),
                ('short_name', models.CharField(blank=True, max_length=50, verbose_name='Short Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('mission', models.TextField(blank=True, verbose_name='Mission')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('student_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Student Count')),
                ('faculty_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Faculty Count')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='faculties/logos/', verbose_name='Logo')),
                ('images', models.JSONField(blank=True, default=list, verbose_name='Images')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculties', to='universities.university')),
            ],
            options={
                'verbose_name': 'University Faculty',
                'verbose_name_plural': 'University Faculties',
                'ordering': ['university', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UniversityPartnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_name', models.CharField(max_length=255, verbose_name='Partner Name')),
                ('partnership_type', models.CharField(choices=[('academic', 'Academic'), ('research', 'Research'), ('student_exchange', 'Student Exchange'), ('faculty_exchange', 'Faculty Exchange'), ('joint_degree', 'Joint Degree'), ('mou', 'Memorandum of Understanding')], max_length=20, verbose_name='Partnership Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('objectives', models.TextField(blank=True, verbose_name='Objectives')),
                ('partner_contact', models.CharField(blank=True, max_length=255, verbose_name='Partner Contact')),
                ('partner_email', models.EmailField(blank=True, max_length=254, verbose_name='Partner Email')),
                ('partner_website', models.URLField(blank=True, verbose_name='Partner Website')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('pending', 'Pending'), ('terminated', 'Terminated')], default='active', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerships', to='universities.university')),
            ],
            options={
                'verbose_name': 'University Partnership',
                'verbose_name_plural': 'University Partnerships',
                'ordering': ['-start_date', 'partner_name'],
            },
        ),
        migrations.CreateModel(
            name='UniversityProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Program Name')),
                ('program_level', models.CharField(choices=[('undergraduate', 'Undergraduate'), ('graduate', 'Graduate'), ('postgraduate', 'Postgraduate'), ('phd', 'PhD'), ('diploma', 'Diploma'), ('certificate', 'Certificate')], max_length=20, verbose_name='Program Level')),
                ('program_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('online', 'Online'), ('hybrid', 'Hybrid'), ('distance', 'Distance Learning')], max_length=20, verbose_name='Program Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('objectives', models.TextField(blank=True, verbose_name='Objectives')),
                ('outcomes', models.TextField(blank=True, verbose_name='Learning Outcomes')),
                ('duration_years', models.PositiveIntegerField(verbose_name='Duration (Years)')),
                ('total_credits', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Credits')),
                ('semesters', models.PositiveIntegerField(default=2, verbose_name='Semesters per Year')),
                ('entry_requirements', models.TextField(blank=True, verbose_name='Entry Requirements')),
                ('language_requirements', models.TextField(blank=True, verbose_name='Language Requirements')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='universities.university')),
            ],
            options={
                'verbose_name': 'University Program',
                'verbose_name_plural': 'University Programs',
                'ordering': ['university', 'program_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UniversityResearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Research Title')),
                ('research_area', models.CharField(choices=[('science', 'Science'), ('technology', 'Technology'), ('engineering', 'Engineering'), ('medicine', 'Medicine'), ('arts', 'Arts & Humanities'), ('social_sciences', 'Social Sciences'), ('business', 'Business'), ('education', 'Education'), ('environment', 'Environment'), ('agriculture', 'Agriculture')], max_length=20, verbose_name='Research Area')),
                ('description', models.TextField(verbose_name='Description')),
                ('objectives', models.TextField(blank=True, verbose_name='Objectives')),
                ('methodology', models.TextField(blank=True, verbose_name='Methodology')),
                ('funding_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='Funding Amount')),
                ('funding_source', models.CharField(blank=True, max_length=255, verbose_name='Funding Source')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('completed', 'Completed'), ('planned', 'Planned'), ('suspended', 'Suspended')], default='ongoing', max_length=20, verbose_name='Status')),
                ('publications', models.JSONField(blank=True, default=list, verbose_name='Publications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='research', to='universities.university')),
            ],
            options={
                'verbose_name': 'University Research',
                'verbose_name_plural': 'University Research',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='UniversityRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking_type', models.CharField(choices=[('world', 'World Ranking'), ('national', 'National Ranking'), ('regional', 'Regional Ranking'), ('subject', 'Subject Ranking'), ('employability', 'Employability Ranking'), ('research', 'Research Ranking')], max_length=20, verbose_name='Ranking Type')),
                ('ranking_source', models.CharField(max_length=100, verbose_name='Ranking Source')),
                ('rank', models.PositiveIntegerField(verbose_name='Rank')),
                ('total_institutions', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total Institutions')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('methodology', models.TextField(blank=True, verbose_name='Methodology')),
                ('criteria', models.JSONField(blank=True, default=list, verbose_name='Criteria')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='universities.university')),
            ],
            options={
                'verbose_name': 'University Ranking',
                'verbose_name_plural': 'University Rankings',
                'ordering': ['-year', 'ranking_type', 'rank'],
                'unique_together': {('university', 'ranking_type', 'ranking_source', 'year')},
            },
        ),
    ]
