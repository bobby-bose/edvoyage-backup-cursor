# Generated by Django 5.2.4 on 2025-08-01 17:05

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App'), ('webhook', 'Webhook'), ('slack', 'Slack'), ('telegram', 'Telegram'), ('whatsapp', 'WhatsApp'), ('discord', 'Discord'), ('facebook', 'Facebook Messenger')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('config', models.JSONField(blank=True, default=dict)),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('api_secret', models.CharField(blank=True, max_length=255)),
                ('webhook_url', models.URLField(blank=True)),
                ('rate_limit', models.PositiveIntegerField(default=100)),
                ('timeout_seconds', models.PositiveIntegerField(default=30)),
                ('retry_attempts', models.PositiveIntegerField(default=3)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification_channels',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['channel_type', 'is_active'], name='notificatio_channel_283982_idx'), models.Index(fields=['is_default'], name='notificatio_is_defa_46e631_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('template_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App Notification'), ('webhook', 'Webhook'), ('slack', 'Slack'), ('telegram', 'Telegram'), ('whatsapp', 'WhatsApp')], max_length=20)),
                ('category', models.CharField(choices=[('system', 'System'), ('user', 'User'), ('payment', 'Payment'), ('application', 'Application'), ('university', 'University'), ('course', 'Course'), ('reminder', 'Reminder'), ('alert', 'Alert'), ('marketing', 'Marketing'), ('support', 'Support')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('html_content', models.TextField(blank=True)),
                ('variables', models.JSONField(blank=True, default=dict)),
                ('sample_data', models.JSONField(blank=True, default=dict)),
                ('priority', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('delay_minutes', models.PositiveIntegerField(default=0)),
                ('retry_count', models.PositiveIntegerField(default=3)),
                ('description', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification_templates',
                'ordering': ['category', 'name'],
                'indexes': [models.Index(fields=['template_type', 'is_active'], name='notificatio_templat_9634d5_idx'), models.Index(fields=['category', 'is_active'], name='notificatio_categor_8cb0e1_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_id', models.CharField(max_length=100, unique=True)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('html_content', models.TextField(blank=True)),
                ('priority', models.PositiveIntegerField(choices=[(1, 'Low'), (2, 'Normal'), (3, 'High'), (4, 'Urgent'), (5, 'Critical')], default=2)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('bounced', 'Bounced'), ('opened', 'Opened'), ('clicked', 'Clicked')], default='pending', max_length=20)),
                ('category', models.CharField(choices=[('system', 'System'), ('user', 'User'), ('payment', 'Payment'), ('application', 'Application'), ('university', 'University'), ('course', 'Course'), ('reminder', 'Reminder'), ('alert', 'Alert'), ('marketing', 'Marketing'), ('support', 'Support')], max_length=20)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('related_object_id', models.UUIDField(blank=True, null=True)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, max_length=255, null=True)),
                ('delivery_response', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='notifications.notificationchannel')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='notifications.notificationtemplate')),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, default=dict)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('response_code', models.PositiveIntegerField(blank=True, null=True)),
                ('response_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notificationchannel')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notification')),
            ],
            options={
                'db_table': 'notification_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['notification', 'level'], name='notificatio_notific_5fe2ec_idx'), models.Index(fields=['created_at'], name='notificatio_created_45a1e0_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('system', 'System'), ('user', 'User'), ('payment', 'Payment'), ('application', 'Application'), ('university', 'University'), ('course', 'Course'), ('reminder', 'Reminder'), ('alert', 'Alert'), ('marketing', 'Marketing'), ('support', 'Support')], max_length=20)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App'), ('webhook', 'Webhook'), ('slack', 'Slack'), ('telegram', 'Telegram'), ('whatsapp', 'WhatsApp'), ('discord', 'Discord'), ('facebook', 'Facebook Messenger')], max_length=20)),
                ('is_enabled', models.BooleanField(default=True)),
                ('frequency', models.CharField(choices=[('immediate', 'Immediate'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('never', 'Never')], default='immediate', max_length=20)),
                ('quiet_hours_start', models.TimeField(blank=True, null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_preferences',
                'ordering': ['user', 'category', 'channel_type'],
                'indexes': [models.Index(fields=['user', 'category'], name='notificatio_user_id_c5965f_idx'), models.Index(fields=['is_enabled'], name='notificatio_is_enab_38dd95_idx')],
                'unique_together': {('user', 'category', 'channel_type')},
            },
        ),
        migrations.CreateModel(
            name='NotificationSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('frequency', models.CharField(choices=[('once', 'Once'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('custom', 'Custom')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('max_runs', models.PositiveIntegerField(blank=True, null=True)),
                ('run_count', models.PositiveIntegerField(default=0)),
                ('filters', models.JSONField(blank=True, default=dict)),
                ('conditions', models.JSONField(blank=True, default=dict)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='notifications.notificationchannel')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='notifications.notificationtemplate')),
            ],
            options={
                'db_table': 'notification_schedules',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', 'next_run'], name='notificatio_is_acti_7162dc_idx'), models.Index(fields=['frequency', 'is_active'], name='notificatio_frequen_2f1f26_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('total_count', models.PositiveIntegerField(default=0)),
                ('sent_count', models.PositiveIntegerField(default=0)),
                ('failed_count', models.PositiveIntegerField(default=0)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('batch_data', models.JSONField(blank=True, default=dict)),
                ('filters', models.JSONField(blank=True, default=dict)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='notifications.notificationchannel')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='notifications.notificationtemplate')),
            ],
            options={
                'db_table': 'notification_batches',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'scheduled_at'], name='notificatio_status_2f81fa_idx'), models.Index(fields=['created_at'], name='notificatio_created_9e187f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'status'], name='notificatio_user_id_8ab96f_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['category', 'status'], name='notificatio_categor_a693df_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at'], name='notificatio_schedul_2a5c00_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='notificatio_created_e4c995_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_read'], name='notificatio_is_read_3f8c44_idx'),
        ),
    ]
